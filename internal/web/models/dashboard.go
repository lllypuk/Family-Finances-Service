package models

import (
	"time"

	"github.com/google/uuid"

	"family-budget-service/internal/domain/budget"
	"family-budget-service/internal/domain/transaction"
)

// DashboardViewModel –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
type DashboardViewModel struct {
	MonthlySummary   *MonthlySummaryCard   `json:"monthly_summary"`
	BudgetOverview   *BudgetOverviewCard   `json:"budget_overview"`
	RecentActivity   *RecentActivityCard   `json:"recent_activity"`
	CategoryInsights *CategoryInsightsCard `json:"category_insights"`
}

// MonthlySummaryCard —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü
type MonthlySummaryCard struct {
	TotalIncome      float64 `json:"total_income"`
	TotalExpenses    float64 `json:"total_expenses"`
	NetIncome        float64 `json:"net_income"`
	TransactionCount int     `json:"transaction_count"`
	PreviousIncome   float64 `json:"previous_income"`
	PreviousExpenses float64 `json:"previous_expenses"`
	IncomeChange     float64 `json:"income_change"`   // Percentage change
	ExpensesChange   float64 `json:"expenses_change"` // Percentage change
	CurrentMonth     string  `json:"current_month"`
	PreviousMonth    string  `json:"previous_month"`
	HasPreviousData  bool    `json:"has_previous_data"`
}

// GetIncomeChangeClass –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤
func (m *MonthlySummaryCard) GetIncomeChangeClass() string {
	if m.IncomeChange > 0 {
		return "text-success"
	} else if m.IncomeChange < 0 {
		return "text-danger"
	}
	return "text-muted"
}

// GetExpensesChangeClass –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
func (m *MonthlySummaryCard) GetExpensesChangeClass() string {
	if m.ExpensesChange > 0 {
		return "text-danger" // –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ - –ø–ª–æ—Ö–æ
	} else if m.ExpensesChange < 0 {
		return "text-success" // –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ - —Ö–æ—Ä–æ—à–æ
	}
	return "text-muted"
}

// GetNetIncomeClass –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–∞
func (m *MonthlySummaryCard) GetNetIncomeClass() string {
	if m.NetIncome > 0 {
		return "text-success"
	} else if m.NetIncome < 0 {
		return "text-danger"
	}
	return "text-muted"
}

// BudgetOverviewCard —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –±—é–¥–∂–µ—Ç–∞–º
type BudgetOverviewCard struct {
	TotalBudgets  int                   `json:"total_budgets"`
	ActiveBudgets int                   `json:"active_budgets"`
	OverBudget    int                   `json:"over_budget"`
	NearLimit     int                   `json:"near_limit"`
	TopBudgets    []*BudgetProgressItem `json:"top_budgets"`
	AlertsSummary *BudgetAlertsSummary  `json:"alerts_summary"`
}

// BudgetProgressItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±—é–¥–∂–µ—Ç–∞
type BudgetProgressItem struct {
	ID            uuid.UUID     `json:"id"`
	Name          string        `json:"name"`
	CategoryName  string        `json:"category_name,omitempty"`
	Amount        float64       `json:"amount"`
	Spent         float64       `json:"spent"`
	Remaining     float64       `json:"remaining"`
	Percentage    float64       `json:"percentage"`
	Period        budget.Period `json:"period"`
	StartDate     time.Time     `json:"start_date"`
	EndDate       time.Time     `json:"end_date"`
	DaysRemaining int           `json:"days_remaining"`
	IsOverBudget  bool          `json:"is_over_budget"`
	IsNearLimit   bool          `json:"is_near_limit"`
	AlertLevel    string        `json:"alert_level"` // "success", "warning", "danger"
}

// GetProgressBarClass –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è progress bar
func (b *BudgetProgressItem) GetProgressBarClass() string {
	if b.IsOverBudget {
		return "progress-danger"
	} else if b.IsNearLimit {
		return "progress-warning"
	}
	return "progress-success"
}

// GetAlertBadgeClass –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è badge
func (b *BudgetProgressItem) GetAlertBadgeClass() string {
	switch b.AlertLevel {
	case "danger":
		return "badge-danger"
	case "warning":
		return "badge-warning"
	default:
		return "badge-success"
	}
}

// BudgetAlertsSummary —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –∞–ª–µ—Ä—Ç–∞–º –±—é–¥–∂–µ—Ç–æ–≤
type BudgetAlertsSummary struct {
	CriticalAlerts int `json:"critical_alerts"`
	WarningAlerts  int `json:"warning_alerts"`
	TotalAlerts    int `json:"total_alerts"`
}

// RecentActivityCard —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
type RecentActivityCard struct {
	Transactions []*RecentTransactionItem `json:"transactions"`
	TotalCount   int                      `json:"total_count"`
	ShowingCount int                      `json:"showing_count"`
	HasMoreData  bool                     `json:"has_more_data"`
	LastUpdated  time.Time                `json:"last_updated"`
}

// RecentTransactionItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
type RecentTransactionItem struct {
	ID           uuid.UUID        `json:"id"`
	Description  string           `json:"description"`
	Amount       float64          `json:"amount"`
	Type         transaction.Type `json:"type"`
	CategoryName string           `json:"category_name"`
	Date         time.Time        `json:"date"`
	CreatedAt    time.Time        `json:"created_at"`
	RelativeTime string           `json:"relative_time"` // "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
}

// GetTypeClass –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func (t *RecentTransactionItem) GetTypeClass() string {
	switch t.Type {
	case transaction.TypeIncome:
		return "text-success"
	case transaction.TypeExpense:
		return "text-danger"
	default:
		return "text-muted"
	}
}

// GetTypeIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func (t *RecentTransactionItem) GetTypeIcon() string {
	switch t.Type {
	case transaction.TypeIncome:
		return "üí∞"
	case transaction.TypeExpense:
		return "üí∏"
	default:
		return "üí≥"
	}
}

// CategoryInsightsCard —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
type CategoryInsightsCard struct {
	TopExpenseCategories []*CategoryInsightItem `json:"top_expense_categories"`
	TopIncomeCategories  []*CategoryInsightItem `json:"top_income_categories"`
	PeriodStart          time.Time              `json:"period_start"`
	PeriodEnd            time.Time              `json:"period_end"`
	TotalExpenses        float64                `json:"total_expenses"`
	TotalIncome          float64                `json:"total_income"`
}

// CategoryInsightItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
type CategoryInsightItem struct {
	CategoryID       uuid.UUID `json:"category_id"`
	CategoryName     string    `json:"category_name"`
	CategoryColor    string    `json:"category_color,omitempty"`
	CategoryIcon     string    `json:"category_icon,omitempty"`
	Amount           float64   `json:"amount"`
	TransactionCount int       `json:"transaction_count"`
	Percentage       float64   `json:"percentage"`
}

// GetPercentageClass –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
func (c *CategoryInsightItem) GetPercentageClass() string {
	if c.Percentage >= CategoryHighPercentage {
		return "text-danger"
	} else if c.Percentage >= CategoryMediumPercentage {
		return "text-warning"
	}
	return "text-success"
}

// DashboardFilters —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è dashboard
type DashboardFilters struct {
	Period      string     `query:"period"      validate:"omitempty,oneof=current_month last_month last_3_months last_6_months current_year"`
	StartDate   *time.Time `query:"start_date"`
	EndDate     *time.Time `query:"end_date"`
	CategoryID  *uuid.UUID `query:"category_id"`
	RefreshMode string     `query:"refresh"     validate:"omitempty,oneof=auto manual"`
}

// GetPeriodDates –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
func (f *DashboardFilters) GetPeriodDates() (time.Time, time.Time) {
	now := time.Now()

	switch f.Period {
	case "last_month":
		start := time.Date(now.Year(), now.Month()-1, 1, 0, 0, 0, 0, now.Location())
		end := start.AddDate(0, 1, -1).Add(23*time.Hour + 59*time.Minute + 59*time.Second)
		return start, end
	case "last_3_months":
		start := time.Date(now.Year(), now.Month()-2, 1, 0, 0, 0, 0, now.Location())
		end := time.Date(now.Year(), now.Month()+1, 1, 0, 0, 0, 0, now.Location()).Add(-time.Second)
		return start, end
	case "last_6_months":
		start := time.Date(now.Year(), now.Month()-5, 1, 0, 0, 0, 0, now.Location())
		end := time.Date(now.Year(), now.Month()+1, 1, 0, 0, 0, 0, now.Location()).Add(-time.Second)
		return start, end
	case "current_year":
		start := time.Date(now.Year(), 1, 1, 0, 0, 0, 0, now.Location())
		end := time.Date(now.Year()+1, 1, 1, 0, 0, 0, 0, now.Location()).Add(-time.Second)
		return start, end
	default: // "current_month"
		start := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, now.Location())
		end := start.AddDate(0, 1, -1).Add(23*time.Hour + 59*time.Minute + 59*time.Second)
		return start, end
	}
}

// ValidateCustomDateRange –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
func (f *DashboardFilters) ValidateCustomDateRange() error {
	if f.StartDate != nil && f.EndDate != nil {
		if f.EndDate.Before(*f.StartDate) {
			return ErrInvalidDateRange
		}

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 2 –≥–æ–¥–∞–º–∏
		maxPeriod := MaxPeriodYears * DaysInYear * HoursInDay * time.Hour
		if f.EndDate.Sub(*f.StartDate) > maxPeriod {
			return ErrDateRangeTooLarge
		}
	}
	return nil
}

// Constants –¥–ª—è dashboard
const (
	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
	MaxRecentTransactions = 10
	MaxTopBudgets         = 5
	MaxTopCategories      = 5

	// –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
	BudgetNearLimitThreshold = 80.0  // 80% –æ—Ç –±—é–¥–∂–µ—Ç–∞
	BudgetOverLimitThreshold = 100.0 // 100% –æ—Ç –±—é–¥–∂–µ—Ç–∞

	// –ü–µ—Ä–∏–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
	StatsRefreshInterval    = 60  // 1 –º–∏–Ω—É—Ç–∞
	ActivityRefreshInterval = 30  // 30 —Å–µ–∫—É–Ω–¥
	BudgetRefreshInterval   = 120 // 2 –º–∏–Ω—É—Ç—ã

	// –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	CategoryHighPercentage   = 30.0 // 30% - –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
	CategoryMediumPercentage = 15.0 // 15% - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç

	// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
	HoursInDay     = 24
	DaysInWeek     = 7
	DaysInMonth    = 30
	DaysInYear     = 365
	MaxPeriodYears = 2

	// –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
	PercentageMultiplier = 100.0
)

// Error constants
var (
	ErrInvalidDateRange  = NewValidationError("End date must be after start date")
	ErrDateRangeTooLarge = NewValidationError("Date range cannot exceed 2 years")
)

// NewValidationError creates a new validation error with the given message
func NewValidationError(message string) error {
	return &ValidationError{Message: message}
}

// ValidationError –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
type ValidationError struct {
	Message string
}

func (e *ValidationError) Error() string {
	return e.Message
}

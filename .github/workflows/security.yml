name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

env:
  GO_VERSION: "1.24"

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["go"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build application
        run: |
          make deps
          make build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: make deps

      - name: Run govulncheck and Filter Results
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest

          # Run govulncheck, capturing its exit code without failing the step.
          # Exit code 0 = no vulns, 3 = vulns found, other = error.
          exit_code=0
          govulncheck -json ./... > govulncheck-report.json || exit_code=$?

          echo "--- govulncheck report ---"
          cat govulncheck-report.json
          echo "--------------------------"

          if [ $exit_code -eq 0 ]; then
            echo "Success: No vulnerabilities found."
            exit 0
          fi

          # If exit code is not 3, it's an unexpected error.
          if [ $exit_code -ne 3 ]; then
            echo "Error: govulncheck failed with unexpected exit code $exit_code."
            exit $exit_code
          fi

          # Exit code is 3, so vulns were found. Check if they are all ignorable.
          # Use jq to count vulnerabilities that are NOT the one we want to ignore.
          # The `-s` flag reads the JSON stream into a single array.
          UNIGNORED_COUNT=$(jq -s 'map(select(.osv.id != "GO-2025-3829")) | length' govulncheck-report.json)

          if [ "$UNIGNORED_COUNT" -eq 0 ]; then
            echo "Success: Only ignored vulnerabilities were found."
            exit 0
          else
            echo "Error: Found $UNIGNORED_COUNT unignored vulnerabilities."
            jq -s 'map(select(.osv.id != "GO-2025-3829"))' govulncheck-report.json
            exit 1
          fi

      - name: Upload govulncheck report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: govulncheck-report
          path: govulncheck-report.json
          retention-days: 30

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest

    container:
      image: semgrep/semgrep

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep \
            --config=auto \
            --sarif \
            --output=semgrep-report.sarif \
            --severity=ERROR \
            --severity=WARNING \
            .

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-report.sarif

  osv-scanner:
    name: OSV Scanner
    runs-on: ubuntu-latest
    permissions:
      # Required for uploading SARIF results to Code Scanning
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install OSV Scanner
        run: go install github.com/google/osv-scanner/cmd/osv-scanner@v1

      - name: Run OSV Scanner
        run: |
          # Add the Go bin directory to the PATH to ensure osv-scanner is found
          export PATH=$(go env GOPATH)/bin:$PATH
          osv-scanner --format=sarif --output=osv-results.sarif ./

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: osv-results.sarif

  security-scorecard:
    name: OSSF Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
